
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, FlatList, Alert } from 'react-native';
import { RoleScreenProps, Order } from '../types';
import { Colors } from '../Constants/colors';
import { OrderCard } from '../components/OrderCard';
import { CustomButton } from '../components/CustomButton';
import { useOrders } from '../contexts/OrderContext';



const STATUS_OPTIONS = [
  { key: 'all', label: 'T·∫•t c·∫£' },
  { key: 'pending', label: 'Ch·ªù nh·∫≠n' },
  { key: 'confirmed', label: 'ƒêang ƒë·∫øn' },
  { key: 'in-progress', label: 'B·∫Øt ƒë·∫ßu s·ª≠a' },
  { key: 'completed', label: 'Ho√†n th√†nh' },
];


const WorkerScreen: React.FC<RoleScreenProps> = () => {
  // Gi·∫£ l·∫≠p workerId cho th·ª£ (c√≥ th·ªÉ l·∫•y t·ª´ context ƒëƒÉng nh·∫≠p th·ª±c t·∫ø)
  const workerId = 'worker-demo';
  const { orders: allOrders, updateOrderStatus, saveOrders } = useOrders();
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  // Th·ª£ xem to√†n b·ªô ƒë∆°n, ƒë∆°n m·ªõi nh·∫•t l√™n ƒë·∫ßu
  const orders = [...allOrders].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());


  // Nh·∫≠n ƒë∆°n: ki·ªÉm tra race condition
  const handleAssignOrder = async (order: Order) => {
    if (order.assignedWorker && order.assignedWorker !== workerId) {
      Alert.alert('ƒê∆°n ƒë√£ c√≥ th·ª£ nh·∫≠n!');
      return;
    }
    try {
      // Reload ƒë∆°n m·ªõi nh·∫•t tr∆∞·ªõc khi nh·∫≠n
      const latestOrder = allOrders.find(o => o.id === order.id);
      if (latestOrder?.assignedWorker) {
        Alert.alert('ƒê∆°n ƒë√£ c√≥ th·ª£ nh·∫≠n!');
        return;
      }
      // G√°n assignedWorker
      const newOrders = allOrders.map(o =>
        o.id === order.id ? { ...o, assignedWorker: workerId, status: 'confirmed' as Order['status'] } : o
      );
      await saveOrders(newOrders);
      Alert.alert('Th√†nh c√¥ng', 'B·∫°n ƒë√£ nh·∫≠n ƒë∆°n th√†nh c√¥ng!');
    } catch {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ nh·∫≠n ƒë∆°n!');
    }
  };

  // Ch·ªâ th·ª£ nh·∫≠n m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i
  const handleStatusChange = async (orderId: string, newStatus: Order['status']) => {
    const order = allOrders.find(o => o.id === orderId);
    if (!order) return;
    if (order.assignedWorker !== workerId) {
      Alert.alert('B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ƒë∆°n n√†y!');
      return;
    }
    try {
      await updateOrderStatus(orderId, newStatus);
      Alert.alert('Th√†nh c√¥ng', 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng!');
    } catch {
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng!');
    }
  };

  const handleOrderPress = (order: Order) => {
    Alert.alert(
      'Chi ti·∫øt ƒë∆°n h√†ng',
      `Kh√°ch h√†ng: ${order.customerName}\nS·ªë ƒëi·ªán tho·∫°i: ${order.phoneNumber}\nƒê·ªãa ch·ªâ: ${order.address}\nD·ªãch v·ª•: ${order.serviceType}\nTh·ªùi gian y√™u c·∫ßu: ${order.requestedTime}\nGhi ch√∫: ${order.notes || 'Kh√¥ng c√≥'}`,
      [{ text: 'ƒê√≥ng' }]
    );
  };

  const filteredOrders = selectedStatus === 'all'
    ? orders
    : orders.filter(order => order.status === selectedStatus);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Xin ch√†o, Th·ª£ s·ª≠a ch·ªØa!</Text>
      <Text style={styles.subtitle}>B·∫°n c√≥ th·ªÉ xem, nh·∫≠n v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c ƒë∆°n ph√π h·ª£p</Text>

      {/* B·ªô l·ªçc tr·∫°ng th√°i */}
      <View style={styles.filterContainer}>
        {STATUS_OPTIONS.map(opt => (
          <CustomButton
            key={opt.key}
            title={opt.label}
            onPress={() => setSelectedStatus(opt.key)}
            variant={selectedStatus === opt.key ? 'primary' : 'outline'}
            style={styles.filterButton}
          />
        ))}
      </View>

      {/* Danh s√°ch ƒë∆°n */}
      <FlatList
        data={filteredOrders}
        keyExtractor={item => item.id}
        renderItem={({ item }) => {
          // ƒê∆°n ch∆∞a nh·∫≠n: hi·ªÉn th·ªã n√∫t Nh·∫≠n ƒë∆°n
          if (!item.assignedWorker) {
            return (
              <OrderCard
                order={item}
                onPress={handleOrderPress}
                showActions={false}
              >
                <CustomButton
                  title="Nh·∫≠n ƒë∆°n"
                  onPress={() => handleAssignOrder(item)}
                  style={{ marginTop: 8 }}
                />
              </OrderCard>
            );
          }
          // ƒê∆°n ƒë√£ nh·∫≠n b·ªüi th·ª£ n√†y: cho ph√©p c·∫≠p nh·∫≠t tr·∫°ng th√°i
          if (item.assignedWorker === workerId) {
            return (
              <OrderCard
                order={item}
                onPress={handleOrderPress}
                showActions={true}
                onStatusChange={handleStatusChange}
              />
            );
          }
          // ƒê∆°n ƒë√£ c√≥ th·ª£ kh√°c nh·∫≠n: ch·ªâ xem
          return (
            <OrderCard
              order={item}
              onPress={handleOrderPress}
              showActions={false}
            />
          );
        }}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyIcon}>üìã</Text>
            <Text style={styles.emptyText}>Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ph√π h·ª£p</Text>
          </View>
        }
        contentContainerStyle={{ paddingBottom: 40 }}
        style={{ width: '100%' }}
        showsVerticalScrollIndicator={false}
      />
    </View>
  );
};


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
    paddingTop: 24,
    paddingHorizontal: 0,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: Colors.primary,
    textAlign: 'center',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: Colors.textSecondary,
    textAlign: 'center',
    marginBottom: 12,
  },
  filterContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    gap: 8,
    marginBottom: 8,
  },
  filterButton: {
    marginHorizontal: 4,
    marginVertical: 4,
    minWidth: 90,
  },
  emptyContainer: {
    alignItems: 'center',
    marginTop: 40,
  },
  emptyIcon: {
    fontSize: 48,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 16,
    color: Colors.textSecondary,
  },
});

export default WorkerScreen;